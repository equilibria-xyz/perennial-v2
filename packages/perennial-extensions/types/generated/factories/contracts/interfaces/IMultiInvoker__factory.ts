/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMultiInvoker,
  IMultiInvokerInterface,
} from "../../../contracts/interfaces/IMultiInvoker";

const _abi = [
  {
    inputs: [],
    name: "MultiInvoker_Invoke_BadSender",
    type: "error",
  },
  {
    inputs: [],
    name: "MultiInvoker_PlaceOrder_OrderMustBeSingleSided",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IMultiInvoker.PerennialAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiInvoker.Invocation[]",
        name: "invocations",
        type: "tuple[]",
      },
    ],
    name: "invoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMultiInvoker__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiInvokerInterface {
    return new utils.Interface(_abi) as IMultiInvokerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMultiInvoker {
    return new Contract(address, _abi, signerOrProvider) as IMultiInvoker;
  }
}
