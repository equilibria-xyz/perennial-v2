/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveMath6,
  CurveMath6Interface,
} from "../../../../@equilibria/root-v2/contracts/CurveMath6";

const _abi = [
  {
    inputs: [],
    name: "CurveMath6OutOfBoundsError",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212209b3a459f8fd29224fe887573b2f6f27382c92774cc5123f40d8c99a21820ab9b64736f6c63430008130033";

type CurveMath6ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveMath6ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveMath6__factory extends ContractFactory {
  constructor(...args: CurveMath6ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveMath6> {
    return super.deploy(overrides || {}) as Promise<CurveMath6>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveMath6 {
    return super.attach(address) as CurveMath6;
  }
  override connect(signer: Signer): CurveMath6__factory {
    return super.connect(signer) as CurveMath6__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveMath6Interface {
    return new utils.Interface(_abi) as CurveMath6Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveMath6 {
    return new Contract(address, _abi, signerOrProvider) as CurveMath6;
  }
}
