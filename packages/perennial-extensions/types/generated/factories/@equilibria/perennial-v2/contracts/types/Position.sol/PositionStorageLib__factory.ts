/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  PositionStorageLib,
  PositionStorageLibInterface,
} from "../../../../../../@equilibria/perennial-v2/contracts/types/Position.sol/PositionStorageLib";

const _abi = [
  {
    inputs: [],
    name: "PositionStorageInvalidError",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204fe44164cfbe3c25f22c93d667d94e242f49e89bad8d66284e0e63da5d02d55a64736f6c63430008130033";

type PositionStorageLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionStorageLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PositionStorageLib__factory extends ContractFactory {
  constructor(...args: PositionStorageLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PositionStorageLib> {
    return super.deploy(overrides || {}) as Promise<PositionStorageLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionStorageLib {
    return super.attach(address) as PositionStorageLib;
  }
  override connect(signer: Signer): PositionStorageLib__factory {
    return super.connect(signer) as PositionStorageLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionStorageLibInterface {
    return new utils.Interface(_abi) as PositionStorageLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionStorageLib {
    return new Contract(address, _abi, signerOrProvider) as PositionStorageLib;
  }
}
