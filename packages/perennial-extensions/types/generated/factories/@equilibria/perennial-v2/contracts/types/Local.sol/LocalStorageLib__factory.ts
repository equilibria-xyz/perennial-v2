/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  LocalStorageLib,
  LocalStorageLibInterface,
} from "../../../../../../@equilibria/perennial-v2/contracts/types/Local.sol/LocalStorageLib";

const _abi = [
  {
    inputs: [],
    name: "LocalStorageInvalidError",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a15bd3c08b74f7df55c2e5c2ddb956910ddd224789347a6f4b1705834cb34e9864736f6c63430008130033";

type LocalStorageLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LocalStorageLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LocalStorageLib__factory extends ContractFactory {
  constructor(...args: LocalStorageLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LocalStorageLib> {
    return super.deploy(overrides || {}) as Promise<LocalStorageLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LocalStorageLib {
    return super.attach(address) as LocalStorageLib;
  }
  override connect(signer: Signer): LocalStorageLib__factory {
    return super.connect(signer) as LocalStorageLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LocalStorageLibInterface {
    return new utils.Interface(_abi) as LocalStorageLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LocalStorageLib {
    return new Contract(address, _abi, signerOrProvider) as LocalStorageLib;
  }
}
