/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type UJumpRateUtilizationCurve6Struct = {
  minRate: PromiseOrValue<BigNumberish>;
  maxRate: PromiseOrValue<BigNumberish>;
  targetRate: PromiseOrValue<BigNumberish>;
  targetUtilization: PromiseOrValue<BigNumberish>;
};

export type UJumpRateUtilizationCurve6StructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minRate: BigNumber;
  maxRate: BigNumber;
  targetRate: BigNumber;
  targetUtilization: BigNumber;
};

export type PayoffStruct = {
  provider: PromiseOrValue<string>;
  short: PromiseOrValue<boolean>;
};

export type PayoffStructOutput = [string, boolean] & {
  provider: string;
  short: boolean;
};

export type MarketParameterStruct = {
  maintenance: PromiseOrValue<BigNumberish>;
  fundingFee: PromiseOrValue<BigNumberish>;
  takerFee: PromiseOrValue<BigNumberish>;
  makerFee: PromiseOrValue<BigNumberish>;
  positionFee: PromiseOrValue<BigNumberish>;
  makerLimit: PromiseOrValue<BigNumberish>;
  closed: PromiseOrValue<boolean>;
  makerRewardRate: PromiseOrValue<BigNumberish>;
  longRewardRate: PromiseOrValue<BigNumberish>;
  shortRewardRate: PromiseOrValue<BigNumberish>;
  utilizationCurve: UJumpRateUtilizationCurve6Struct;
  oracle: PromiseOrValue<string>;
  payoff: PayoffStruct;
};

export type MarketParameterStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  UJumpRateUtilizationCurve6StructOutput,
  string,
  PayoffStructOutput
] & {
  maintenance: BigNumber;
  fundingFee: BigNumber;
  takerFee: BigNumber;
  makerFee: BigNumber;
  positionFee: BigNumber;
  makerLimit: BigNumber;
  closed: boolean;
  makerRewardRate: BigNumber;
  longRewardRate: BigNumber;
  shortRewardRate: BigNumber;
  utilizationCurve: UJumpRateUtilizationCurve6StructOutput;
  oracle: string;
  payoff: PayoffStructOutput;
};

export type GlobalStruct = {
  currentId: PromiseOrValue<BigNumberish>;
  protocolFee: PromiseOrValue<BigNumberish>;
  marketFee: PromiseOrValue<BigNumberish>;
};

export type GlobalStructOutput = [BigNumber, BigNumber, BigNumber] & {
  currentId: BigNumber;
  protocolFee: BigNumber;
  marketFee: BigNumber;
};

export type LocalStruct = {
  currentId: PromiseOrValue<BigNumberish>;
  collateral: PromiseOrValue<BigNumberish>;
  reward: PromiseOrValue<BigNumberish>;
  liquidation: PromiseOrValue<BigNumberish>;
};

export type LocalStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  currentId: BigNumber;
  collateral: BigNumber;
  reward: BigNumber;
  liquidation: BigNumber;
};

export type PositionStruct = {
  id: PromiseOrValue<BigNumberish>;
  version: PromiseOrValue<BigNumberish>;
  maker: PromiseOrValue<BigNumberish>;
  long: PromiseOrValue<BigNumberish>;
  short: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  version: BigNumber;
  maker: BigNumber;
  long: BigNumber;
  short: BigNumber;
  fee: BigNumber;
};

export type Accumulator6Struct = { _value: PromiseOrValue<BigNumberish> };

export type Accumulator6StructOutput = [BigNumber] & { _value: BigNumber };

export type UAccumulator6Struct = { _value: PromiseOrValue<BigNumberish> };

export type UAccumulator6StructOutput = [BigNumber] & { _value: BigNumber };

export type VersionStruct = {
  makerValue: Accumulator6Struct;
  longValue: Accumulator6Struct;
  shortValue: Accumulator6Struct;
  makerReward: UAccumulator6Struct;
  longReward: UAccumulator6Struct;
  shortReward: UAccumulator6Struct;
  valid: PromiseOrValue<boolean>;
};

export type VersionStructOutput = [
  Accumulator6StructOutput,
  Accumulator6StructOutput,
  Accumulator6StructOutput,
  UAccumulator6StructOutput,
  UAccumulator6StructOutput,
  UAccumulator6StructOutput,
  boolean
] & {
  makerValue: Accumulator6StructOutput;
  longValue: Accumulator6StructOutput;
  shortValue: Accumulator6StructOutput;
  makerReward: UAccumulator6StructOutput;
  longReward: UAccumulator6StructOutput;
  shortReward: UAccumulator6StructOutput;
  valid: boolean;
};

export declare namespace IMarket {
  export type MarketDefinitionStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    reward: PromiseOrValue<string>;
  };

  export type MarketDefinitionStructOutput = [
    string,
    string,
    string,
    string
  ] & { name: string; symbol: string; token: string; reward: string };
}

export interface IMarketInterface extends utils.Interface {
  functions: {
    "acceptOwner()": FunctionFragment;
    "global()": FunctionFragment;
    "initialize((string,string,address,address),(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256),address,(address,bool)))": FunctionFragment;
    "locals(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "parameter()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pendingPosition(uint256)": FunctionFragment;
    "pendingPositions(address,uint256)": FunctionFragment;
    "position()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "reward()": FunctionFragment;
    "settle(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "treasury()": FunctionFragment;
    "update(address,uint256,uint256,uint256,int256)": FunctionFragment;
    "updateParameter((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256),address,(address,bool)))": FunctionFragment;
    "updatePendingOwner(address)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "versions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwner"
      | "global"
      | "initialize"
      | "locals"
      | "name"
      | "owner"
      | "parameter"
      | "pendingOwner"
      | "pendingPosition"
      | "pendingPositions"
      | "position"
      | "positions"
      | "reward"
      | "settle"
      | "symbol"
      | "token"
      | "treasury"
      | "update"
      | "updateParameter"
      | "updatePendingOwner"
      | "updateTreasury"
      | "versions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "global", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IMarket.MarketDefinitionStruct, MarketParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "locals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "parameter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPositions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "position", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParameter",
    values: [MarketParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePendingOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "versions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "global", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versions", data: BytesLike): Result;

  events: {
    "AccountSettle(address,uint256,uint256)": EventFragment;
    "CollateralSettled(address,int256,uint256)": EventFragment;
    "FeeClaimed(address,uint256)": EventFragment;
    "FeeSettled(uint256,uint256)": EventFragment;
    "Liquidation(address,address,uint256)": EventFragment;
    "OwnerUpdated(address)": EventFragment;
    "ParameterUpdated(tuple)": EventFragment;
    "PendingOwnerUpdated(address)": EventFragment;
    "RewardClaimed(address,uint256)": EventFragment;
    "Settle(uint256,uint256)": EventFragment;
    "TreasuryUpdated(address)": EventFragment;
    "Updated(address,uint256,uint256,uint256,uint256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Updated"): EventFragment;
}

export interface AccountSettleEventObject {
  account: string;
  preVersion: BigNumber;
  toVersion: BigNumber;
}
export type AccountSettleEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AccountSettleEventObject
>;

export type AccountSettleEventFilter = TypedEventFilter<AccountSettleEvent>;

export interface CollateralSettledEventObject {
  account: string;
  amount: BigNumber;
  newShortfall: BigNumber;
}
export type CollateralSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CollateralSettledEventObject
>;

export type CollateralSettledEventFilter =
  TypedEventFilter<CollateralSettledEvent>;

export interface FeeClaimedEventObject {
  treasury: string;
  feeAmount: BigNumber;
}
export type FeeClaimedEvent = TypedEvent<
  [string, BigNumber],
  FeeClaimedEventObject
>;

export type FeeClaimedEventFilter = TypedEventFilter<FeeClaimedEvent>;

export interface FeeSettledEventObject {
  protocolFeeAmount: BigNumber;
  marketFeeAmount: BigNumber;
}
export type FeeSettledEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeeSettledEventObject
>;

export type FeeSettledEventFilter = TypedEventFilter<FeeSettledEvent>;

export interface LiquidationEventObject {
  account: string;
  liquidator: string;
  liquidationReward: BigNumber;
}
export type LiquidationEvent = TypedEvent<
  [string, string, BigNumber],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface OwnerUpdatedEventObject {
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ParameterUpdatedEventObject {
  newParameter: MarketParameterStructOutput;
}
export type ParameterUpdatedEvent = TypedEvent<
  [MarketParameterStructOutput],
  ParameterUpdatedEventObject
>;

export type ParameterUpdatedEventFilter =
  TypedEventFilter<ParameterUpdatedEvent>;

export interface PendingOwnerUpdatedEventObject {
  newPendingOwner: string;
}
export type PendingOwnerUpdatedEvent = TypedEvent<
  [string],
  PendingOwnerUpdatedEventObject
>;

export type PendingOwnerUpdatedEventFilter =
  TypedEventFilter<PendingOwnerUpdatedEvent>;

export interface RewardClaimedEventObject {
  account: string;
  rewardAmount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface SettleEventObject {
  preVersion: BigNumber;
  toVersion: BigNumber;
}
export type SettleEvent = TypedEvent<[BigNumber, BigNumber], SettleEventObject>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface TreasuryUpdatedEventObject {
  newTreasury: string;
}
export type TreasuryUpdatedEvent = TypedEvent<
  [string],
  TreasuryUpdatedEventObject
>;

export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;

export interface UpdatedEventObject {
  account: string;
  version: BigNumber;
  newMaker: BigNumber;
  newLong: BigNumber;
  newShort: BigNumber;
  newCollateral: BigNumber;
}
export type UpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdatedEventObject
>;

export type UpdatedEventFilter = TypedEventFilter<UpdatedEvent>;

export interface IMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    global(overrides?: CallOverrides): Promise<[GlobalStructOutput]>;

    initialize(
      definition_: IMarket.MarketDefinitionStruct,
      parameter_: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    locals(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LocalStructOutput]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parameter(
      overrides?: CallOverrides
    ): Promise<[MarketParameterStructOutput]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pendingPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    pendingPositions(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    position(overrides?: CallOverrides): Promise<[PositionStructOutput]>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    reward(overrides?: CallOverrides): Promise<[string]>;

    settle(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    update(
      account: PromiseOrValue<string>,
      newMaker: PromiseOrValue<BigNumberish>,
      newLong: PromiseOrValue<BigNumberish>,
      newShort: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateParameter(
      newParameter: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versions(
      oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VersionStructOutput]>;
  };

  acceptOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  global(overrides?: CallOverrides): Promise<GlobalStructOutput>;

  initialize(
    definition_: IMarket.MarketDefinitionStruct,
    parameter_: MarketParameterStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  locals(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LocalStructOutput>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parameter(overrides?: CallOverrides): Promise<MarketParameterStructOutput>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pendingPosition(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  pendingPositions(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  position(overrides?: CallOverrides): Promise<PositionStructOutput>;

  positions(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  reward(overrides?: CallOverrides): Promise<string>;

  settle(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  update(
    account: PromiseOrValue<string>,
    newMaker: PromiseOrValue<BigNumberish>,
    newLong: PromiseOrValue<BigNumberish>,
    newShort: PromiseOrValue<BigNumberish>,
    newCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateParameter(
    newParameter: MarketParameterStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePendingOwner(
    newPendingOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versions(
    oracleVersion: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VersionStructOutput>;

  callStatic: {
    acceptOwner(overrides?: CallOverrides): Promise<void>;

    global(overrides?: CallOverrides): Promise<GlobalStructOutput>;

    initialize(
      definition_: IMarket.MarketDefinitionStruct,
      parameter_: MarketParameterStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    locals(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LocalStructOutput>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parameter(overrides?: CallOverrides): Promise<MarketParameterStructOutput>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pendingPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    pendingPositions(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    position(overrides?: CallOverrides): Promise<PositionStructOutput>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    reward(overrides?: CallOverrides): Promise<string>;

    settle(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    update(
      account: PromiseOrValue<string>,
      newMaker: PromiseOrValue<BigNumberish>,
      newLong: PromiseOrValue<BigNumberish>,
      newShort: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateParameter(
      newParameter: MarketParameterStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    versions(
      oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VersionStructOutput>;
  };

  filters: {
    "AccountSettle(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      preVersion?: null,
      toVersion?: null
    ): AccountSettleEventFilter;
    AccountSettle(
      account?: PromiseOrValue<string> | null,
      preVersion?: null,
      toVersion?: null
    ): AccountSettleEventFilter;

    "CollateralSettled(address,int256,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      newShortfall?: null
    ): CollateralSettledEventFilter;
    CollateralSettled(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      newShortfall?: null
    ): CollateralSettledEventFilter;

    "FeeClaimed(address,uint256)"(
      treasury?: PromiseOrValue<string> | null,
      feeAmount?: null
    ): FeeClaimedEventFilter;
    FeeClaimed(
      treasury?: PromiseOrValue<string> | null,
      feeAmount?: null
    ): FeeClaimedEventFilter;

    "FeeSettled(uint256,uint256)"(
      protocolFeeAmount?: null,
      marketFeeAmount?: null
    ): FeeSettledEventFilter;
    FeeSettled(
      protocolFeeAmount?: null,
      marketFeeAmount?: null
    ): FeeSettledEventFilter;

    "Liquidation(address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      liquidator?: null,
      liquidationReward?: null
    ): LiquidationEventFilter;
    Liquidation(
      account?: PromiseOrValue<string> | null,
      liquidator?: null,
      liquidationReward?: null
    ): LiquidationEventFilter;

    "OwnerUpdated(address)"(
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "ParameterUpdated(tuple)"(newParameter?: null): ParameterUpdatedEventFilter;
    ParameterUpdated(newParameter?: null): ParameterUpdatedEventFilter;

    "PendingOwnerUpdated(address)"(
      newPendingOwner?: PromiseOrValue<string> | null
    ): PendingOwnerUpdatedEventFilter;
    PendingOwnerUpdated(
      newPendingOwner?: PromiseOrValue<string> | null
    ): PendingOwnerUpdatedEventFilter;

    "RewardClaimed(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      account?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): RewardClaimedEventFilter;

    "Settle(uint256,uint256)"(
      preVersion?: null,
      toVersion?: null
    ): SettleEventFilter;
    Settle(preVersion?: null, toVersion?: null): SettleEventFilter;

    "TreasuryUpdated(address)"(newTreasury?: null): TreasuryUpdatedEventFilter;
    TreasuryUpdated(newTreasury?: null): TreasuryUpdatedEventFilter;

    "Updated(address,uint256,uint256,uint256,uint256,int256)"(
      account?: PromiseOrValue<string> | null,
      version?: null,
      newMaker?: null,
      newLong?: null,
      newShort?: null,
      newCollateral?: null
    ): UpdatedEventFilter;
    Updated(
      account?: PromiseOrValue<string> | null,
      version?: null,
      newMaker?: null,
      newLong?: null,
      newShort?: null,
      newCollateral?: null
    ): UpdatedEventFilter;
  };

  estimateGas: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    global(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      definition_: IMarket.MarketDefinitionStruct,
      parameter_: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    locals(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parameter(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingPositions(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    position(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    settle(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      account: PromiseOrValue<string>,
      newMaker: PromiseOrValue<BigNumberish>,
      newLong: PromiseOrValue<BigNumberish>,
      newShort: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateParameter(
      newParameter: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versions(
      oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    global(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      definition_: IMarket.MarketDefinitionStruct,
      parameter_: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    locals(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingPositions(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    position(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settle(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      account: PromiseOrValue<string>,
      newMaker: PromiseOrValue<BigNumberish>,
      newLong: PromiseOrValue<BigNumberish>,
      newShort: PromiseOrValue<BigNumberish>,
      newCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateParameter(
      newParameter: MarketParameterStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePendingOwner(
      newPendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versions(
      oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
