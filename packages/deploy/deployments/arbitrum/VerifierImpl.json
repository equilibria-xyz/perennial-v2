{
  "address": "0x492bF4B1E07c440F68EB35a5237dC0A858bABd73",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "InitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidDomainError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidExpiryError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidGroupError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidNonceError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidSignatureError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerifierInvalidSignerError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        }
      ],
      "name": "GroupCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "NonceCancelled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "group",
          "type": "uint256"
        }
      ],
      "name": "cancelGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct GroupCancellation",
          "name": "groupCancellation",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancelGroupWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "domain",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct Common",
          "name": "common",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancelNonceWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactorySigners",
          "name": "marketFactory_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketFactory",
      "outputs": [
        {
          "internalType": "contract IMarketFactorySigners",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "accessor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "internalType": "struct AccessUpdate[]",
              "name": "operators",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "accessor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "internalType": "struct AccessUpdate[]",
              "name": "signers",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct AccessUpdateBatch",
          "name": "accessUpdateBatch",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAccessUpdateBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "domain",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct Common",
          "name": "common",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyCommon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "group",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct GroupCancellation",
          "name": "groupCancellation",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGroupCancellation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Fixed6",
              "name": "amount",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "UFixed6",
              "name": "collateralization",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "accessor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "internalType": "struct AccessUpdate",
              "name": "access",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct OperatorUpdate",
          "name": "operatorUpdate",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyOperatorUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "accessor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "internalType": "struct AccessUpdate",
              "name": "access",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "domain",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "group",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Common",
              "name": "common",
              "type": "tuple"
            }
          ],
          "internalType": "struct SignerUpdate",
          "name": "signerUpdate",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifySignerUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2b24354c4e1dee1dbca5776316d91d6ca1c1a6697ff3fb09f3dcb10c21fa89f",
  "receipt": {
    "to": null,
    "from": "0x66a7fDB96C583c59597de16d8b2B989231415339",
    "contractAddress": "0x492bF4B1E07c440F68EB35a5237dC0A858bABd73",
    "transactionIndex": 2,
    "gasUsed": "4967369",
    "logsBloom": "0x
    "blockHash": "0xd41c225db7861e5625c575d3d9ad021b007c277dc83e8f645d8130a575e5d7cd",
    "transactionHash": "0xf2b24354c4e1dee1dbca5776316d91d6ca1c1a6697ff3fb09f3dcb10c21fa89f",
    "logs": [],
    "blockNumber": 266573600,
    "cumulativeGasUsed": "5415568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "345aa42b382a18d880d44eca35498289",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"InitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidDomainError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidExpiryError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidGroupError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidNonceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidSignatureError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerifierInvalidSignerError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"}],\"name\":\"GroupCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NonceCancelled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"}],\"name\":\"cancelGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct GroupCancellation\",\"name\":\"groupCancellation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelGroupWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelNonceWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarketFactorySigners\",\"name\":\"marketFactory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFactory\",\"outputs\":[{\"internalType\":\"contract IMarketFactorySigners\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct AccessUpdate[]\",\"name\":\"operators\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct AccessUpdate[]\",\"name\":\"signers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct AccessUpdateBatch\",\"name\":\"accessUpdateBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyAccessUpdateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyCommon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct GroupCancellation\",\"name\":\"groupCancellation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGroupCancellation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Fixed6\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"UFixed6\",\"name\":\"collateralization\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct AccessUpdate\",\"name\":\"access\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct OperatorUpdate\",\"name\":\"operatorUpdate\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyOperatorUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct AccessUpdate\",\"name\":\"access\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct SignerUpdate\",\"name\":\"signerUpdate\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifySignerUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles nonce management for verified messages.       - nonce is a single use unique value per message that is invalidated after use       - group allows for an entire set of messages to be invalidated via a single cancel operation      Messages verification request must come from the domain address if it is set.       - In the case of intent / fills, this means that the market should be set as the domain.\",\"errors\":{\"VerifierInvalidDomainError()\":[{\"custom:error\":\"Message was meant for another protocol, version, or chain\"}],\"VerifierInvalidExpiryError()\":[{\"custom:error\":\"Block timestamp has exceeded user-assigned expiration\"}],\"VerifierInvalidGroupError()\":[{\"custom:error\":\"Group nonce has already been used\"}],\"VerifierInvalidNonceError()\":[{\"custom:error\":\"Nonce has already been used\"}],\"VerifierInvalidSignatureError()\":[{\"custom:error\":\"Signature length was unexpected\"}],\"VerifierInvalidSignerError()\":[{\"custom:error\":\"Signer is trying to cancel a nonce for another user\"}]},\"kind\":\"dev\",\"methods\":{\"cancelGroup(uint256)\":{\"params\":{\"group\":\"The group nonce to cancel\"}},\"cancelGroupWithSignature((uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"params\":{\"groupCancellation\":\"The group cancellation message\",\"signature\":\"The signature of the account for the group cancellation\"}},\"cancelNonce(uint256)\":{\"params\":{\"nonce\":\"The nonce to cancel\"}},\"cancelNonceWithSignature((address,address,address,uint256,uint256,uint256),bytes)\":{\"details\":\"Process a no-op message that will invalidate the specified nonce\",\"params\":{\"common\":\"The common data of the message\",\"signature\":\"The signature of the account for the message\"}},\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches\"},\"initialize(address)\":{\"params\":{\"marketFactory_\":\"The market factory\"}},\"verifyAccessUpdateBatch(((address,bool)[],(address,bool)[],(address,address,address,uint256,uint256,uint256)),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"accessUpdateBatch\":\"The batch access update (operator and signer) message to verify\",\"signature\":\"The signature of the account for the batch access update\"}},\"verifyCommon((address,address,address,uint256,uint256,uint256),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"common\":\"The common data of the message\",\"signature\":\"The signature of the account for the message\"}},\"verifyGroupCancellation((uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"groupCancellation\":\"The group cancellation to verify\",\"signature\":\"The signature of the account for the group cancellation\"}},\"verifyIntent((int256,int256,uint256,address,address,uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"intent\":\"The intent order to verify\",\"signature\":\"The signature of the taker for the intent order\"}},\"verifyOperatorUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"operatorUpdate\":\"The operator update message to verify\",\"signature\":\"The signature of the account for the operator update\"}},\"verifySignerUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)\":{\"details\":\"Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer\",\"params\":{\"signature\":\"The signature of the account for the signer update\",\"signerUpdate\":\"The signer update message to verify\"}}},\"stateVariables\":{\"marketFactory\":{\"details\":\"market factory to check authorization\"}},\"title\":\"Verifier\",\"version\":1},\"userdoc\":{\"events\":{\"GroupCancelled(address,uint256)\":{\"notice\":\"Emitted when a group nonce is cancelled\"},\"NonceCancelled(address,uint256)\":{\"notice\":\"Emitted when a nonce is cancelled\"}},\"kind\":\"user\",\"methods\":{\"cancelGroup(uint256)\":{\"notice\":\"Cancels a group nonce\"},\"cancelGroupWithSignature((uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Cancels a group for an account via a signed message\"},\"cancelNonce(uint256)\":{\"notice\":\"Cancels a nonce\"},\"cancelNonceWithSignature((address,address,address,uint256,uint256,uint256),bytes)\":{\"notice\":\"Cancels a nonce for an account via a signed message\"},\"groups(address,uint256)\":{\"notice\":\"Returns whether the group nonce has been cancelled\"},\"initialize(address)\":{\"notice\":\"Initializes the contract state\"},\"nonces(address,uint256)\":{\"notice\":\"Returns whether the nonce has been cancelled\"},\"verifyAccessUpdateBatch(((address,bool)[],(address,bool)[],(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Verifies the signature of an access update batch type\"},\"verifyCommon((address,address,address,uint256,uint256,uint256),bytes)\":{\"notice\":\"Verifies the signature of no-op common message\"},\"verifyGroupCancellation((uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Verifies the signature of a group cancellation type\"},\"verifyIntent((int256,int256,uint256,address,address,uint256,(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Verifies the signature of an intent order type\"},\"verifyOperatorUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Verifies the signature of a operator update type\"},\"verifySignerUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)\":{\"notice\":\"Verifies the signature of a signer update type\"}},\"notice\":\"Singleton ERC712 signed message verifier for the Perennial protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@perennial/verifier/contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@equilibria/root/attribute/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IInitializable.sol\\\";\\nimport \\\"../storage/Storage.sol\\\";\\n\\n/**\\n * @title Initializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `Initializable.sol` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract Initializable is IInitializable {\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.Initializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.Initializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert InitializableZeroVersionError();\\n        if (_version.read() >= version) revert InitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n        emit Initialized(version);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert InitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xaae151abc669fe2ec33a80e4e62da1849b7863034aeb9c16122c728d041cfb0b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\ninterface IInitializable {\\n    error InitializableZeroVersionError();\\n    error InitializableAlreadyInitializedError(uint256 version);\\n    error InitializableNotInitializingError();\\n\\n    event Initialized(uint256 version);\\n}\\n\",\"keccak256\":\"0xa626c401aab111b5ccdaa280b4d0137e2f4261a71796cd89a1435025083b4035\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/NumberMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @title NumberMath\\n * @notice Library for additional math functions that are not included in the OpenZeppelin libraries.\\n */\\nlibrary NumberMath {\\n    error DivisionByZero();\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert DivisionByZero();\\n        return Math.ceilDiv(a, b);\\n    }\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(int256 a, int256 b) internal pure returns (int256) {\\n        return sign(a) * sign(b) * int256(divOut(SignedMath.abs(a), SignedMath.abs(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the sign of an int256\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a int256 to find the sign of\\n     * @return Sign of the int256\\n     */\\n    function sign(int256 a) internal pure returns (int256) {\\n        if (a > 0) return 1;\\n        if (a < 0) return -1;\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3578ce6e74ee6589ba0468e2c539ef1eb51d6687b508e637620926eb8396b4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed18.wrap(-1 * Fixed18.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldivOut(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), Fixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd3541bc1dbe5ca81f996a1ed5a05a7b8c74247426aab221d1a8f37be91d0e4f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev Fixed6 type\\ntype Fixed6 is int256;\\nusing Fixed6Lib for Fixed6 global;\\ntype Fixed6Storage is bytes32;\\nusing Fixed6StorageLib for Fixed6Storage global;\\n\\n/**\\n * @title Fixed6Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed6Lib {\\n    error Fixed6OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e6;\\n    Fixed6 public constant ZERO = Fixed6.wrap(0);\\n    Fixed6 public constant ONE = Fixed6.wrap(BASE);\\n    Fixed6 public constant NEG_ONE = Fixed6.wrap(-1 * BASE);\\n    Fixed6 public constant MAX = Fixed6.wrap(type(int256).max);\\n    Fixed6 public constant MIN = Fixed6.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (Fixed6) {\\n        uint256 value = UFixed6.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed6OverflowError(value);\\n        return Fixed6.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed6 m) internal pure returns (Fixed6) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed6.wrap(-1 * Fixed6.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a, bool roundOut) internal pure returns (Fixed6) {\\n        return roundOut ? Fixed6.wrap(NumberMath.divOut(Fixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed6 a) internal pure returns (bool) {\\n        return Fixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) + Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) - Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * BASE / Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldiv(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldivOut(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / Fixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), Fixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed6 a, Fixed6 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed6.unwrap(a), Fixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.min(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.max(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed6 a) internal pure returns (int256) {\\n        return Fixed6.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed6 a) internal pure returns (int256) {\\n        if (Fixed6.unwrap(a) > 0) return 1;\\n        if (Fixed6.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed6 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(SignedMath.abs(Fixed6.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed6StorageLib {\\n    function read(Fixed6Storage self) internal view returns (Fixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed6Storage self, Fixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba2715da2fdf9393cc5e3ce7f9a38f7bfd3b271dcbf9a7fac5245f7c3ecc4522\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed18 a) internal pure returns (UFixed18) {\\n        return a.lt(Fixed18Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * BASE, UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldivOut(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), UFixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42ce82e3622fdea0b8044a68a25f6df5102b3a25e1d26a2aaec1f928815c1d56\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev UFixed6 type\\ntype UFixed6 is uint256;\\nusing UFixed6Lib for UFixed6 global;\\ntype UFixed6Storage is bytes32;\\nusing UFixed6StorageLib for UFixed6Storage global;\\n\\n/**\\n * @title UFixed6Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed6Lib {\\n    error UFixed6UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e6;\\n    UFixed6 public constant ZERO = UFixed6.wrap(0);\\n    UFixed6 public constant ONE = UFixed6.wrap(BASE);\\n    UFixed6 public constant MAX = UFixed6.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (UFixed6) {\\n        int256 value = Fixed6.unwrap(a);\\n        if (value < 0) revert UFixed6UnderflowError(value);\\n        return UFixed6.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed6 a) internal pure returns (UFixed6) {\\n        return a.lt(Fixed6Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a, bool roundOut) internal pure returns (UFixed6) {\\n        return roundOut ? UFixed6.wrap(NumberMath.divOut(UFixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed6 a) internal pure returns (bool) {\\n        return UFixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) + UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) - UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * BASE / UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * BASE, UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldiv(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldivOut(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / UFixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), UFixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed6 a, UFixed6 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed6.unwrap(a), UFixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.min(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.max(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed6 a) internal pure returns (uint256) {\\n        return UFixed6.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed6StorageLib {\\n    function read(UFixed6Storage self) internal view returns (UFixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed6Storage self, UFixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x378f6c0e6a0e8b534c019d99ddaecada9816e4c8ae66deba59bee92ac13ddc7f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\n/// @dev Stored boolean slot\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\n\\n/// @dev Stored uint256 slot\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\n\\n/// @dev Stored int256 slot\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\n\\n/// @dev Stored address slot\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\n\\n/// @dev Stored bytes32 slot\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\n/**\\n * @title BoolStorageLib\\n * @notice Library to manage storage and retrieval of a boolean at a fixed storage slot\\n */\\nlibrary BoolStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bool value\\n     */\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value boolean value to store\\n     */\\n    function store(BoolStorage self, bool value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Uint256StorageLib\\n * @notice Library to manage storage and retrieval of an uint256 at a fixed storage slot\\n */\\nlibrary Uint256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored uint256 value\\n     */\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value uint256 value to store\\n     */\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Int256StorageLib\\n * @notice Library to manage storage and retrieval of an int256 at a fixed storage slot\\n */\\nlibrary Int256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored int256 value\\n     */\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value int256 value to store\\n     */\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title AddressStorageLib\\n * @notice Library to manage storage and retrieval of an address at a fixed storage slot\\n */\\nlibrary AddressStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored address value\\n     */\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value address value to store\\n     */\\n    function store(AddressStorage self, address value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Bytes32StorageLib\\n * @notice Library to manage storage and retrieval of a bytes32 at a fixed storage slot\\n */\\nlibrary Bytes32StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bytes32 value\\n     */\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value bytes32 value to store\\n     */\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf904e2f3ded161530d179eca7f405de56db377f4770e236589940b943ef0dee9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/VerifierBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { Common, CommonLib } from \\\"./types/Common.sol\\\";\\nimport { GroupCancellation, GroupCancellationLib } from \\\"./types/GroupCancellation.sol\\\";\\nimport { IVerifierBase } from \\\"./interfaces/IVerifierBase.sol\\\";\\n\\nabstract contract VerifierBase is IVerifierBase, EIP712 {\\n    /// @inheritdoc IVerifierBase\\n    mapping(address => mapping(uint256 => bool)) public nonces;\\n\\n    /// @inheritdoc IVerifierBase\\n    mapping(address => mapping(uint256 => bool)) public groups;\\n\\n    /// @inheritdoc IVerifierBase\\n    function verifyCommon(Common calldata common, bytes calldata signature)\\n        external\\n        validateAndCancel(common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(common.signer, _hashTypedDataV4(CommonLib.hash(common)), signature))\\n            revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @inheritdoc IVerifierBase\\n    function verifyGroupCancellation(GroupCancellation calldata groupCancellation, bytes calldata signature)\\n        external\\n        validateAndCancel(groupCancellation.common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(\\n            groupCancellation.common.signer,\\n            _hashTypedDataV4(GroupCancellationLib.hash(groupCancellation)),\\n            signature\\n        )) revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @inheritdoc IVerifierBase\\n    function cancelNonce(uint256 nonce) external {\\n        _cancelNonce(msg.sender, nonce);\\n    }\\n\\n    /// @inheritdoc IVerifierBase\\n    function cancelGroup(uint256 group) external {\\n        _cancelGroup(msg.sender, group);\\n    }\\n\\n    /// @inheritdoc IVerifierBase\\n    function cancelNonceWithSignature(Common calldata common, bytes calldata signature) external {\\n        IVerifierBase(this).verifyCommon(common, signature); // cancels nonce\\n    }\\n\\n    /// @inheritdoc IVerifierBase\\n    function cancelGroupWithSignature(GroupCancellation calldata groupCancellation, bytes calldata signature) external {\\n        IVerifierBase(this).verifyGroupCancellation(groupCancellation, signature);\\n        _cancelGroup(groupCancellation.common.account, groupCancellation.group);\\n    }\\n\\n    /// @notice Checks account authorization\\n    /// @param account the account to check authorization for\\n    /// @param signer the signer of the account\\n    /// @return whether the signer is authorized\\n    function _authorized(address account, address signer) internal view virtual returns (bool) {\\n        return account == signer;\\n    }\\n\\n    /// @notice Cancels a nonce\\n    /// @param account The account to cancel the nonce for\\n    /// @param nonce The nonce to cancel\\n    function _cancelNonce(address account, uint256 nonce) private {\\n        nonces[account][nonce] = true;\\n        emit NonceCancelled(account, nonce);\\n    }\\n\\n    /// @notice Cancels a group nonce\\n    /// @param account The account to cancel the group nonce for\\n    /// @param group The group nonce to cancel\\n    function _cancelGroup(address account, uint256 group) private {\\n        groups[account][group] = true;\\n        emit GroupCancelled(account, group);\\n    }\\n\\n    /// @dev Validates the common data of a message\\n    modifier validateAndCancel(Common calldata common, bytes calldata signature) {\\n        if (!_authorized(common.account, common.signer)) revert VerifierInvalidSignerError();\\n        if (common.domain != msg.sender) revert VerifierInvalidDomainError();\\n        if (signature.length != 65) revert VerifierInvalidSignatureError();\\n        if (nonces[common.account][common.nonce]) revert VerifierInvalidNonceError();\\n        if (groups[common.account][common.group]) revert VerifierInvalidGroupError();\\n        if (block.timestamp >= common.expiry) revert VerifierInvalidExpiryError();\\n\\n        _cancelNonce(common.account, common.nonce);\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xccaaff1c3dd6867d5a9445f8810a83744fc83db255bb217bd48bd8347ee4ced1\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/interfaces/IVerifierBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common } from \\\"../types/Common.sol\\\";\\nimport { GroupCancellation } from \\\"../types/GroupCancellation.sol\\\";\\n\\ninterface IVerifierBase {\\n    // sig: 0xfec563a0\\n    /// @custom:error Signer is trying to cancel a nonce for another user\\n    error VerifierInvalidSignerError();\\n    // sig: 0xa568ee00\\n    /// @custom:error Message was meant for another protocol, version, or chain\\n    error VerifierInvalidDomainError();\\n    // sig: 0xb09262f6\\n    /// @custom:error Signature length was unexpected\\n    error VerifierInvalidSignatureError();\\n    // sig: 0xe6784f14\\n    /// @custom:error Nonce has already been used\\n    error VerifierInvalidNonceError();\\n    // sig: 0x79998279\\n    /// @custom:error Group nonce has already been used\\n    error VerifierInvalidGroupError();\\n    // sig: 0x27661908\\n    /// @custom:error Block timestamp has exceeded user-assigned expiration\\n    error VerifierInvalidExpiryError();\\n\\n    /// @notice Emitted when a nonce is cancelled\\n    event NonceCancelled(address indexed account, uint256 nonce);\\n    /// @notice Emitted when a group nonce is cancelled\\n    event GroupCancelled(address indexed account, uint256 group);\\n\\n    /// @notice Returns whether the nonce has been cancelled\\n    /// @param account The account to check the nonce for\\n    /// @param nonce The nonce to check\\n    /// @return True if the nonce has been cancelled\\n    function nonces(address account, uint256 nonce) external view returns (bool);\\n\\n    /// @notice Returns whether the group nonce has been cancelled\\n    /// @param account The account to check the group nonce for\\n    /// @param nonce The group nonce to check\\n    /// @return True if the group nonce has been cancelled\\n    function groups(address account, uint256 nonce) external view returns (bool);\\n\\n    /// @notice Verifies the signature of no-op common message\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param common The common data of the message\\n    /// @param signature The signature of the account for the message\\n    function verifyCommon(Common calldata common, bytes calldata signature) external;\\n\\n    /// @notice Verifies the signature of a group cancellation type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param groupCancellation The group cancellation to verify\\n    /// @param signature The signature of the account for the group cancellation\\n    function verifyGroupCancellation(GroupCancellation calldata groupCancellation, bytes calldata signature) external;\\n\\n    /// @notice Cancels a nonce\\n    /// @param nonce The nonce to cancel\\n    function cancelNonce(uint256 nonce) external;\\n\\n    /// @notice Cancels a nonce for an account via a signed message\\n    /// @dev Process a no-op message that will invalidate the specified nonce\\n    /// @param common The common data of the message\\n    /// @param signature The signature of the account for the message\\n    function cancelNonceWithSignature(Common calldata common, bytes calldata signature) external;\\n\\n    /// @notice Cancels a group nonce\\n    /// @param group The group nonce to cancel\\n    function cancelGroup(uint256 group) external;\\n\\n    /// @notice Cancels a group for an account via a signed message\\n    /// @param groupCancellation The group cancellation message\\n    /// @param signature The signature of the account for the group cancellation\\n    function cancelGroupWithSignature(GroupCancellation calldata groupCancellation, bytes calldata signature) external;\\n}\\n\",\"keccak256\":\"0xaf26a1f192b04226b2a95bfd59b72a0278328506ab24838e039017ba7134abc3\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\n/// @notice Fields which need to be hashed in any EIP712 action\\nstruct Common {\\n    /// @dev The target account of the message (usually the account on behalf of which the action is being performed)\\n    address account;\\n    /// @dev EOA signing the message (usually either the account or a delegate of the account)\\n    address signer;\\n    /// @dev ensures the message is unique to a particular protocol version, chain, and verifier\\n    address domain;\\n    /// @dev per-sender nonce which is automatically cancelled upon validation\\n    uint256 nonce;\\n    /// @dev per-sender nonce which must be manually cancelled with a GroupCancellation message\\n    uint256 group;\\n    /// @dev prevents this message from having the intended effect after a specified timestamp\\n    uint256 expiry;\\n}\\nusing CommonLib for Common global;\\n\\n/// @title CommonLib\\n/// @notice Library collecting fields which need to be hashed in any EIP712 message\\nlibrary CommonLib {\\n    /// @dev used to verify a signed message\\n    bytes32 constant public STRUCT_HASH =\\n        keccak256(\\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\");\\n\\n    /// @dev used to create a signed message\\n    function hash(Common memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.account, self.signer, self.domain, self.nonce, self.group, self.expiry));\\n    }\\n}\\n\",\"keccak256\":\"0x0f5a75ca2064a624dae4e7f6c6b494dcc8ec560e5775ec8055dd91471f6cb93b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/types/GroupCancellation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"./Common.sol\\\";\\n\\nstruct GroupCancellation {\\n    /// @dev The group to cancel\\n    uint256 group;\\n\\n    /// @dev The common information for EIP712 actions\\n    Common common;\\n}\\nusing GroupCancellationLib for GroupCancellation global;\\n\\n/// @title GroupCancellationLib\\n/// @notice Library used to hash and verify action to cancel a group nonce.\\nlibrary GroupCancellationLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"GroupCancellation(uint256 group,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(GroupCancellation memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.group, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0x7060c6af6bf8aba391c7b30e3bd164aa529ba6f193a3fd8a45140541f975f398\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbc8d1f66b26e211a1f6f40a17453e9d5020ec96749014379205cff100809884c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@perennial/verifier/contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { VerifierBase } from \\\"@equilibria/root/verifier/VerifierBase.sol\\\";\\nimport { Initializable } from \\\"@equilibria/root/attribute/Initializable.sol\\\";\\n\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IMarketFactorySigners } from \\\"./interfaces/IMarketFactorySigners.sol\\\";\\nimport { Intent, IntentLib } from \\\"./types/Intent.sol\\\";\\nimport { OperatorUpdate, OperatorUpdateLib } from \\\"./types/OperatorUpdate.sol\\\";\\nimport { SignerUpdate, SignerUpdateLib } from \\\"./types/SignerUpdate.sol\\\";\\nimport { AccessUpdateBatch, AccessUpdateBatchLib } from \\\"./types/AccessUpdateBatch.sol\\\";\\n\\n/// @title Verifier\\n/// @notice Singleton ERC712 signed message verifier for the Perennial protocol.\\n/// @dev Handles nonce management for verified messages.\\n///       - nonce is a single use unique value per message that is invalidated after use\\n///       - group allows for an entire set of messages to be invalidated via a single cancel operation\\n///\\n///      Messages verification request must come from the domain address if it is set.\\n///       - In the case of intent / fills, this means that the market should be set as the domain.\\n///\\ncontract Verifier is VerifierBase, IVerifier, Initializable {\\n    /// @dev market factory to check authorization\\n    IMarketFactorySigners public marketFactory;\\n\\n    /// @dev Initializes the domain separator and parameter caches\\n    constructor() EIP712(\\\"Perennial\\\", \\\"1.0.0\\\") { }\\n\\n    /// @notice Initializes the contract state\\n    /// @param marketFactory_ The market factory\\n    function initialize(IMarketFactorySigners marketFactory_) external initializer(1) {\\n        marketFactory = marketFactory_;\\n    }\\n\\n    /// @notice Verifies the signature of an intent order type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param intent The intent order to verify\\n    /// @param signature The signature of the taker for the intent order\\n    function verifyIntent(Intent calldata intent, bytes calldata signature)\\n        external\\n        validateAndCancel(intent.common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(\\n            intent.common.signer,\\n            _hashTypedDataV4(IntentLib.hash(intent)),\\n            signature\\n        )) revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @notice Verifies the signature of a operator update type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param operatorUpdate The operator update message to verify\\n    /// @param signature The signature of the account for the operator update\\n    function verifyOperatorUpdate(OperatorUpdate calldata operatorUpdate, bytes calldata signature)\\n        external\\n        validateAndCancel(operatorUpdate.common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(\\n            operatorUpdate.common.signer,\\n            _hashTypedDataV4(OperatorUpdateLib.hash(operatorUpdate)),\\n            signature\\n        )) revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @notice Verifies the signature of a signer update type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param signerUpdate The signer update message to verify\\n    /// @param signature The signature of the account for the signer update\\n    function verifySignerUpdate(SignerUpdate calldata signerUpdate, bytes calldata signature)\\n        external\\n        validateAndCancel(signerUpdate.common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(\\n            signerUpdate.common.signer,\\n            _hashTypedDataV4(SignerUpdateLib.hash(signerUpdate)),\\n            signature\\n        )) revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @notice Verifies the signature of an access update batch type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param accessUpdateBatch The batch access update (operator and signer) message to verify\\n    /// @param signature The signature of the account for the batch access update\\n    function verifyAccessUpdateBatch(AccessUpdateBatch calldata accessUpdateBatch, bytes calldata signature)\\n        external\\n        validateAndCancel(accessUpdateBatch.common, signature)\\n    {\\n        if (!SignatureChecker.isValidSignatureNow(\\n            accessUpdateBatch.common.signer,\\n            _hashTypedDataV4(AccessUpdateBatchLib.hash(accessUpdateBatch)),\\n            signature\\n        )) revert VerifierInvalidSignerError();\\n    }\\n\\n    /// @notice Checks whether signer is allowed to sign a message for account\\n    /// @param account user to check authorization for\\n    /// @param signer address which signed a message for the account\\n    /// @return true if signer is authorized, otherwise false\\n    function _authorized(address account, address signer) internal view override returns (bool) {\\n        return super._authorized(account, signer) || marketFactory.signers(account, signer);\\n    }\\n}\\n\",\"keccak256\":\"0x9b1f44a351d83aa72a83839d8c3985656427365ba640e251f73f5103f54c727f\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/interfaces/IMarketFactorySigners.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\ninterface IMarketFactorySigners {\\n    function signers(address signer, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25917a750fda301087b7c358771c25a144505c28e46bee786bae60916724ac75\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IVerifierBase } from \\\"@equilibria/root/verifier/interfaces/IVerifierBase.sol\\\";\\nimport { Common } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { Intent } from \\\"../types/Intent.sol\\\";\\nimport { OperatorUpdate } from \\\"../types/OperatorUpdate.sol\\\";\\nimport { SignerUpdate } from \\\"../types/SignerUpdate.sol\\\";\\nimport { AccessUpdateBatch } from \\\"../types/AccessUpdateBatch.sol\\\";\\n\\ninterface IVerifier is IVerifierBase {\\n    function verifyIntent(Intent calldata intent, bytes calldata signature) external;\\n    function verifyOperatorUpdate(OperatorUpdate calldata operatorUpdate, bytes calldata signature) external;\\n    function verifySignerUpdate(SignerUpdate calldata signerUpdate, bytes calldata signature) external;\\n    function verifyAccessUpdateBatch(AccessUpdateBatch calldata accessUpdateBatch, bytes calldata signature) external;\\n}\",\"keccak256\":\"0x44324d826778f9b8d2f67d372da9fff32385deba95141a0930f803a55582f2e6\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/types/AccessUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\n\\nstruct AccessUpdate {\\n    /// @dev The generic signer or operator to approve for the signing account\\n    address accessor;\\n\\n    /// @dev The new status of the signer or operator\\n    bool approved;\\n}\\nusing AccessUpdateLib for AccessUpdate global;\\n\\n/// @title AccessUpdateLib\\n/// @notice Library for AccessUpdate logic and data.\\nlibrary AccessUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\\"AccessUpdate(address accessor,bool approved)\\\");\\n\\n    function hash(AccessUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.accessor, self.approved));\\n    }\\n}\\n\",\"keccak256\":\"0xb1399f3c02437feba0b2cbdf098e59b7d829e6c8c22673d9eef551cbf0c468ad\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/types/AccessUpdateBatch.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"../types/AccessUpdate.sol\\\";\\n\\nstruct AccessUpdateBatch {\\n    /// @dev The operator access update messages\\n    AccessUpdate[] operators;\\n\\n    /// @dev The signer access update messages\\n    AccessUpdate[] signers;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing AccessUpdateBatchLib for AccessUpdateBatch global;\\n\\n/// @title AccessUpdateBatchLib\\n/// @notice Library for AccessUpdateBatch logic and data.\\nlibrary AccessUpdateBatchLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"AccessUpdateBatch(AccessUpdate[] operators,AccessUpdate[] signers,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(AccessUpdateBatch memory self) internal pure returns (bytes32) {\\n        bytes32[] memory operatorHashes = new bytes32[](self.operators.length);\\n        bytes32[] memory signerHashes = new bytes32[](self.signers.length);\\n\\n        for (uint256 i = 0; i < self.operators.length; i++)\\n            operatorHashes[i] = AccessUpdateLib.hash(self.operators[i]);\\n        for (uint256 i = 0; i < self.signers.length; i++)\\n            signerHashes[i] = AccessUpdateLib.hash(self.signers[i]);\\n\\n        return keccak256(\\n            abi.encode(\\n                STRUCT_HASH,\\n                keccak256(abi.encodePacked(operatorHashes)),\\n                keccak256(abi.encodePacked(signerHashes)),\\n                CommonLib.hash(self.common)\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd1a6d36e20cd290cefcdcd0adbeb52e06ea35f62b1133b3d647d89c13bf8f6cc\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/types/Intent.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\n\\nstruct Intent {\\n    /// @dev The size and direction of the order being opened by the taker\\n    ///       - Positive opens long / Negative opens short\\n    ///       - The maker will open the opposite side of the order\\n    ///       - To close, open an order in the opposite direction\\n    Fixed6 amount;\\n\\n    /// @dev The price to execute the order at\\n    Fixed6 price;\\n\\n    /// @dev The solver fee, a percentage of the substractive interface fee\\n    UFixed6 fee;\\n\\n    /// @dev The referral address of the originator of the order (ex. the interface)\\n    address originator;\\n\\n    /// @dev The referral address of the solver of the order (ex. the router)\\n    address solver;\\n\\n    /// @dev The minimium collateralization ratio that must be maintained after the order is executed\\n    UFixed6 collateralization;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing IntentLib for Intent global;\\n\\n/// @title IntentLib\\n/// @notice Library for Intent logic and data.\\nlibrary IntentLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"Intent(int256 amount,int256 price,uint256 fee,address originator,address solver,uint256 collateralization,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(Intent memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.amount, self.price, self.fee, self.originator, self.solver, self.collateralization, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0xc7bb16c559362c751d1889d6fea834be0066674ace8fe610f15122f1979b483b\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/types/OperatorUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"./AccessUpdate.sol\\\";\\n\\nstruct OperatorUpdate {\\n    /// @dev The operator access to update\\n    AccessUpdate access;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing OperatorUpdateLib for OperatorUpdate global;\\n\\n/// @title OperatorUpdateLib\\n/// @notice Library for OperatorUpdate logic and data.\\nlibrary OperatorUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"OperatorUpdate(AccessUpdate access,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(OperatorUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, AccessUpdateLib.hash(self.access), CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0x9862489310881cb283f8befc10ad91599e0ee2fb617962be1957fb077a36f619\",\"license\":\"Apache-2.0\"},\"@perennial/verifier/contracts/types/SignerUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"./AccessUpdate.sol\\\";\\n\\nstruct SignerUpdate {\\n    /// @dev The signer access to update\\n    AccessUpdate access;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing SignerUpdateLib for SignerUpdate global;\\n\\n/// @title SignerUpdateLib\\n/// @notice Library for SignerUpdate logic and data.\\nlibrary SignerUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"SignerUpdate(AccessUpdate access,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(SignerUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, AccessUpdateLib.hash(self.access), CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0xd3165bfb61c612bb24eb360d7dd00b535731ca9f3ef0a806167f7f0995d4c6c8\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61014080604052346200012a5762000017816200012e565b600981526005602082016814195c995b9b9a585b60ba1b8152602060405162000040816200012e565b8381520192640312e302e360dc1b845251902091208160e052610100918183524660a0526040519160208301907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f92838352604085015260608401524660808401523060a084015260a0835260c083019280841060018060401b038511176200011657836040525190206080523060c0526101209081526121a592836200014b843960805183611f79015260a0518361202e015260c05183611f4a015260e05183611fc801525182611fee01525181611fa50152f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b604081019081106001600160401b03821117620001165760405256fe608080604052600480361015610013575f80fd5b5f915f3560e01c90816306ae7095146114b0575080630ac70fc51461143c5780630dd6ae6d1461124a5780630fd9911c1461110a5780633a1505ca14611078578063502e1a16146110045780635f2d6ed714610b915780636f7f07fd146109cb57828163715a86c5146109115750806372b2611b1461072f578063c4d66de814610602578063c681faa5146105c7578063cfdd7aea146105895763e5586705146100bb575f80fd5b34610585577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126105815781359067ffffffffffffffff908183116105795761010090833603011261057d57602435818111610579576101239036908501611542565b916044840190610132826116bd565b9061014a6064870192610144846116bd565b90611a27565b156105505761015b608487016116bd565b73ffffffffffffffffffffffffffffffffffffffff90813391160361052757604186036104fe578061018c856116bd565b16895260209289845260408a209160a489013592838c52855260ff60408c2054166104d5576101ba866116bd565b168a526001916001855260408b2060c48a01358c52855260ff60408c2054166104ac5760e489013542101561048357906101ff610204926101fa886116bd565b611aea565b6116bd565b9660405190606082018281108582111761045757604052808a013584811161045357610235908b36918401016119b8565b82526024810135848111610453576102598c939794928c61026793369201016119b8565b9386880194855236906117b4565b92604087019384528161027b885151611e77565b9781610288845151611e77565b95905b610421575b50508c905b6103e6575b5050506103149060405195866102b38782018093611f07565b03966102e57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe098898101835282611773565b5190209561030a60405191826102fe8982018096611f07565b03908101835282611773565b5190209151611b6a565b90604051938401947f6bf47d762f457a26b6f7e6be836856f95888671ed6748cc345cdaf34c06d63df86526040850152606084015260808301526080825260a0820190828210908211176103ba576040525190206103899392916103839161037b90611c12565b923691611853565b91611c64565b15610392575080f35b6040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b6041877f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b8151805182101561041b57816104086104028695948694611ec6565b51612085565b6104128288611ec6565b52019091610295565b5061029a565b8151805182101561044d579061043b610402828694611ec6565b610445828d611ec6565b52018261028b565b50610290565b8b80fd5b60418b7f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b896040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b896040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b896040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b876040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b876040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b866040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b8380fd5b8280fd5b5080fd5b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610585576105c4903533611aea565b80f35b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610585576105c4903533611df6565b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105855780359073ffffffffffffffffffffffffffffffffffffffff8216809203610581577f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea248906001825410156106fe5750600190557fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255807f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af0557fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f32602060405160018152a180f35b6024906001604051917f3db738da000000000000000000000000000000000000000000000000000000008352820152fd5b50346105855761073e36611621565b60208084019261074d846116bd565b61075e6040870191610144836116bd565b156105505761076f606087016116bd565b73ffffffffffffffffffffffffffffffffffffffff90813391160361052757604185036104fe57806107a0876116bd565b1689528884526040892090608088013591828b52855260ff60408b2054166108e8576107cb876116bd565b168952600184526040892060a08801358a52845260ff60408a2054166108bf5760c087013542101561089657906101ff610808926101fa886116bd565b9360e08636031261089257610389956103839361084961083c61037b94604051946108328661171f565b35855236906117b4565b9283838201525192611b6a565b604051918201927fb1e7b94d1ec06aba73ba4e4de3dab5ac2d404759099626e9870ea2ed8c03928c8452604083015260608201526060815261088a81611757565b519020611c12565b8780fd5b876040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b876040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b886040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b8083346109c85761092136611621565b9391303b15610581576020839161098560405194859384937f72b2611b0000000000000000000000000000000000000000000000000000000085528035809a8601520198610972602485018b6118fc565b61010060e4850152610104840191611962565b038183305af180156109bd576109a9575b50506109a46105c4926116bd565b611df6565b6109b2906116de565b610581578284610996565b6040513d84823e3d90fd5b50fd5b5034610585576109da366115c9565b90604083016109e8816116bd565b6109f96060860191610144836116bd565b15610b6857610a0a608086016116bd565b73ffffffffffffffffffffffffffffffffffffffff908133911603610b3f5760418503610b165780610a3b846116bd565b168852602092888452604089209160a088013592838b52855260ff60408b2054166108e857610a69826116bd565b168952600184526040892060c08801358a52845260ff60408a2054166108bf5760e08701354210156108965792610abe610ab6610389989796946101ff61037b956101fa610383996116bd565b9636906118c2565b90610ad581610acd8451612085565b930151611b6a565b604051918201927f5f91f030fe5f8643d87a7eb661df7abd89b23d6a5c3db93a3c2ad56a46e0112e8452604083015260608201526060815261088a81611757565b866040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b866040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b856040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b5034610585577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36016101a081126105815761018013610585576101843567ffffffffffffffff811161058157610beb9036908301611542565b610bfe610bf6611677565b61014461169a565b15610fdb5773ffffffffffffffffffffffffffffffffffffffff6101043516806101043503610ede573303610fb25760418103610f895773ffffffffffffffffffffffffffffffffffffffff610c52611677565b168452836020526040842061012435855260205260ff604085205416610f605773ffffffffffffffffffffffffffffffffffffffff610c8f611677565b16845260016020526040842061014435855260205260ff604085205416610f375761016435421015610f0e57610cca610124356101fa611677565b610cd261169a565b9160405160e0810181811067ffffffffffffffff821117610ee257604052843581526024356020820152604435604082015260643573ffffffffffffffffffffffffffffffffffffffff81168103610ede57606082015273ffffffffffffffffffffffffffffffffffffffff6084351660843503610ede57608435608082015260a43560a082015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c360112610ede57604051610d908161173b565b60c43573ffffffffffffffffffffffffffffffffffffffff81168103610ede57815273ffffffffffffffffffffffffffffffffffffffff60e4351660e43503610ede5760e43560208201526101043560408201526101243560608201526101443560808201526101643560a08201528060c083015281519160208101519160408201519173ffffffffffffffffffffffffffffffffffffffff606082015116610e5860a073ffffffffffffffffffffffffffffffffffffffff60808501511693015193611b6a565b936040519560208701977f5d21ec11e54721a256a5c5035977bd1f653eb333581872a40e2863d8d0f2bba4895260408801526060870152608086015260a085015260c084015260e083015261010090818301528152610120810181811067ffffffffffffffff8211176103ba576040525190206103899392916103839161037b90611c12565b5f80fd5b6041867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b826040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b826040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b826040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b826040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b826040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b826040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b82346110755760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110755760ff604060209273ffffffffffffffffffffffffffffffffffffffff6110586114fe565b168152808452818120602435825284522054166040519015158152f35b80fd5b5034610ede5761108736611570565b92919091303b15610ede576110df5f936110ce9560405196879586957f0dd6ae6d0000000000000000000000000000000000000000000000000000000087528601906118fc565b60e060c485015260e4840191611962565b038183305af180156110ff576110f3575080f35b6110fd91506116de565b005b6040513d5f823e3d90fd5b5034610ede57611119366115c9565b604083019291611128846116bd565b9061113a6060850192610144846116bd565b15610b685761114b608085016116bd565b9173ffffffffffffffffffffffffffffffffffffffff928333911603610b3f5760418403610b16578261117d876116bd565b165f5260205f815260405f209360a087013594855f52825260ff60405f2054166108e8576111aa886116bd565b165f526001815260405f2060c08701355f52815260ff60405f2054166108bf5760e0860135421015610896576111f3610ab661037b936101ff610383976101fa6112439c6116bd565b9061120281610acd8451612085565b604051918201927f3cfd5b001295d3d66254ffbbc1174a8cff37cba4833b04b5ae988ce63a03e2a58452604083015260608201526060815261088a81611757565b1561039257005b5034610ede5761125936611570565b6112648392936116bd565b926112766020840194610144866116bd565b1561141357611287604084016116bd565b9073ffffffffffffffffffffffffffffffffffffffff9182339116036113ea57604183036113c157816112b9856116bd565b165f525f60205260405f2091606085013592835f5260205260ff60405f205416611398576112e6856116bd565b165f52600160205260405f2060808501355f5260205260ff60405f20541661136f5760a08401354210156113465761037b61134161133c611334611243986101ff610383976101fa8b6116bd565b9636906117b4565b611b6a565b611c12565b856040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b856040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b866040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b856040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b856040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b846040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b34610ede5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610ede5773ffffffffffffffffffffffffffffffffffffffff6114886114fe565b165f52600160205260405f206024355f52602052602060ff60405f2054166040519015158152f35b34610ede575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610ede5760209073ffffffffffffffffffffffffffffffffffffffff600254168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610ede57565b359073ffffffffffffffffffffffffffffffffffffffff82168203610ede57565b9181601f84011215610ede5782359167ffffffffffffffff8311610ede5760208381860195010111610ede57565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112610ede5760c013610ede5760049160c4359067ffffffffffffffff8211610ede576115c591600401611542565b9091565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82016101208112610ede5761010013610ede57600491610104359067ffffffffffffffff8211610ede576115c591600401611542565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82016101008112610ede5760e013610ede5760049160e4359067ffffffffffffffff8211610ede576115c591600401611542565b60c43573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b60e43573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b3573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b67ffffffffffffffff81116116f257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176116f257604052565b60c0810190811067ffffffffffffffff8211176116f257604052565b6080810190811067ffffffffffffffff8211176116f257604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116f257604052565b91908260c0910312610ede576040516117cc8161173b565b60a08082946117da81611521565b84526117e860208201611521565b60208501526117f960408201611521565b604085015260608101356060850152608081013560808501520135910152565b67ffffffffffffffff81116116f257601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261185f82611819565b9161186d6040519384611773565b829481845281830111610ede578281602093845f960137010152565b9190826040910312610ede576040516118a18161171f565b602081936118ae81611521565b83520135908115158203610ede5760200152565b919061010083820312610ede5760206118f7604051926118e18461171f565b604084966118ef8382611889565b8652016117b4565b910152565b60a0809173ffffffffffffffffffffffffffffffffffffffff8061191f83611521565b1685528061192f60208401611521565b16602086015261194160408301611521565b16604085015260608101356060850152608081013560808501520135910152565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b67ffffffffffffffff81116116f25760051b60200190565b9080601f83011215610ede5781359160206119d2846119a0565b936040936119e36040519687611773565b81865260208087019260061b85010193818511610ede57602001915b848310611a0f5750505050505090565b838691611a1c8486611889565b8152019201916119ff565b73ffffffffffffffffffffffffffffffffffffffff80809316911690808214928315611a54575b50505090565b6020929350604490600254169360405194859384927fbd9ee66b000000000000000000000000000000000000000000000000000000008452600484015260248301525afa9081156110ff575f91611aaf575b505f8080611a4e565b90506020813d602011611ae2575b81611aca60209383611773565b81010312610ede57518015158103610ede575f611aa6565b3d9150611abd565b602073ffffffffffffffffffffffffffffffffffffffff7f26ccf9904b9b2fb069d347553978928fd2fc65efb2638dcbeb8d142e974479f0921692835f525f825260405f20815f52825260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055604051908152a2565b73ffffffffffffffffffffffffffffffffffffffff8082511691816020820151169160408201511690606081015160a06080830151920151926040519460208601967fb4055fcf718c8a3df3ed57fdd24994f9e7fd59b92cb4de2ace2999762b0865b0885260408701526060860152608085015260a084015260c083015260e082015260e08152610100810181811067ffffffffffffffff8211176116f25760405251902090565b611c1a611f33565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611c5e81611757565b51902090565b611c6e8383612054565b6005811015611dc957159081611da6575b50611d9e5760405192602093848101917f1626ba7e0000000000000000000000000000000000000000000000000000000094858452602483015260406044830152805190816064840152865f5b838110611d89575050509181611d1f6084827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f885f85819c9a9b829c01015201168101036064810184520182611773565b51915afa913d15611d82573d611d3481611819565b90611d426040519283611773565b81523d5f8383013e5b83611d77575b83611d5c5750505090565b908092935081805181010312610ede570151145f8080611a4e565b805182149350611d51565b6060611d4b565b81818401015160848287010152018790611ccc565b505050600190565b905073ffffffffffffffffffffffffffffffffffffffff8083169116145f611c7f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b602073ffffffffffffffffffffffffffffffffffffffff7feff4aa307383ba25c9ed91f870e99276c37c0de7d8d2099bf7f06848ad69811a921692835f526001825260405f20815f52825260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055604051908152a2565b90611e81826119a0565b611e8e6040519182611773565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611ebc82946119a0565b0190602036910137565b8051821015611eda5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80516020809201915f5b828110611f1f575050505090565b835185529381019392810192600101611f11565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630148061202b575b15611f9b577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611c5e8161173b565b507f00000000000000000000000000000000000000000000000000000000000000004614611f72565b9060418151145f1461207c576115c591602082015190606060408401519301515f1a906120e7565b50505f90600290565b602073ffffffffffffffffffffffffffffffffffffffff82511691015115156040519060208201927f4d29c908d0cf5cfdae041152d8523682cf4817fb676d058c311f235625e50f1984526040830152606082015260608152611c5e81611757565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411612164576020935f9360ff60809460405194855216868401526040830152606082015282805260015afa156110ff575f5173ffffffffffffffffffffffffffffffffffffffff81161561215c57905f90565b505f90600190565b505050505f9060039056fea264697066735822122054d65fb83569b099321e5265b1d193d000bd63722cf38f28a594cc819a59536a64736f6c63430008180033",
  "deployedBytecode": "0x608080604052600480361015610013575f80fd5b5f915f3560e01c90816306ae7095146114b0575080630ac70fc51461143c5780630dd6ae6d1461124a5780630fd9911c1461110a5780633a1505ca14611078578063502e1a16146110045780635f2d6ed714610b915780636f7f07fd146109cb57828163715a86c5146109115750806372b2611b1461072f578063c4d66de814610602578063c681faa5146105c7578063cfdd7aea146105895763e5586705146100bb575f80fd5b34610585577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126105815781359067ffffffffffffffff908183116105795761010090833603011261057d57602435818111610579576101239036908501611542565b916044840190610132826116bd565b9061014a6064870192610144846116bd565b90611a27565b156105505761015b608487016116bd565b73ffffffffffffffffffffffffffffffffffffffff90813391160361052757604186036104fe578061018c856116bd565b16895260209289845260408a209160a489013592838c52855260ff60408c2054166104d5576101ba866116bd565b168a526001916001855260408b2060c48a01358c52855260ff60408c2054166104ac5760e489013542101561048357906101ff610204926101fa886116bd565b611aea565b6116bd565b9660405190606082018281108582111761045757604052808a013584811161045357610235908b36918401016119b8565b82526024810135848111610453576102598c939794928c61026793369201016119b8565b9386880194855236906117b4565b92604087019384528161027b885151611e77565b9781610288845151611e77565b95905b610421575b50508c905b6103e6575b5050506103149060405195866102b38782018093611f07565b03966102e57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe098898101835282611773565b5190209561030a60405191826102fe8982018096611f07565b03908101835282611773565b5190209151611b6a565b90604051938401947f6bf47d762f457a26b6f7e6be836856f95888671ed6748cc345cdaf34c06d63df86526040850152606084015260808301526080825260a0820190828210908211176103ba576040525190206103899392916103839161037b90611c12565b923691611853565b91611c64565b15610392575080f35b6040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b6041877f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b8151805182101561041b57816104086104028695948694611ec6565b51612085565b6104128288611ec6565b52019091610295565b5061029a565b8151805182101561044d579061043b610402828694611ec6565b610445828d611ec6565b52018261028b565b50610290565b8b80fd5b60418b7f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b896040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b896040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b896040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b876040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b876040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b866040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b8380fd5b8280fd5b5080fd5b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610585576105c4903533611aea565b80f35b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610585576105c4903533611df6565b50346105855760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105855780359073ffffffffffffffffffffffffffffffffffffffff8216809203610581577f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea248906001825410156106fe5750600190557fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255807f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af0557fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f32602060405160018152a180f35b6024906001604051917f3db738da000000000000000000000000000000000000000000000000000000008352820152fd5b50346105855761073e36611621565b60208084019261074d846116bd565b61075e6040870191610144836116bd565b156105505761076f606087016116bd565b73ffffffffffffffffffffffffffffffffffffffff90813391160361052757604185036104fe57806107a0876116bd565b1689528884526040892090608088013591828b52855260ff60408b2054166108e8576107cb876116bd565b168952600184526040892060a08801358a52845260ff60408a2054166108bf5760c087013542101561089657906101ff610808926101fa886116bd565b9360e08636031261089257610389956103839361084961083c61037b94604051946108328661171f565b35855236906117b4565b9283838201525192611b6a565b604051918201927fb1e7b94d1ec06aba73ba4e4de3dab5ac2d404759099626e9870ea2ed8c03928c8452604083015260608201526060815261088a81611757565b519020611c12565b8780fd5b876040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b876040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b886040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b8083346109c85761092136611621565b9391303b15610581576020839161098560405194859384937f72b2611b0000000000000000000000000000000000000000000000000000000085528035809a8601520198610972602485018b6118fc565b61010060e4850152610104840191611962565b038183305af180156109bd576109a9575b50506109a46105c4926116bd565b611df6565b6109b2906116de565b610581578284610996565b6040513d84823e3d90fd5b50fd5b5034610585576109da366115c9565b90604083016109e8816116bd565b6109f96060860191610144836116bd565b15610b6857610a0a608086016116bd565b73ffffffffffffffffffffffffffffffffffffffff908133911603610b3f5760418503610b165780610a3b846116bd565b168852602092888452604089209160a088013592838b52855260ff60408b2054166108e857610a69826116bd565b168952600184526040892060c08801358a52845260ff60408a2054166108bf5760e08701354210156108965792610abe610ab6610389989796946101ff61037b956101fa610383996116bd565b9636906118c2565b90610ad581610acd8451612085565b930151611b6a565b604051918201927f5f91f030fe5f8643d87a7eb661df7abd89b23d6a5c3db93a3c2ad56a46e0112e8452604083015260608201526060815261088a81611757565b866040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b866040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b856040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b5034610585577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36016101a081126105815761018013610585576101843567ffffffffffffffff811161058157610beb9036908301611542565b610bfe610bf6611677565b61014461169a565b15610fdb5773ffffffffffffffffffffffffffffffffffffffff6101043516806101043503610ede573303610fb25760418103610f895773ffffffffffffffffffffffffffffffffffffffff610c52611677565b168452836020526040842061012435855260205260ff604085205416610f605773ffffffffffffffffffffffffffffffffffffffff610c8f611677565b16845260016020526040842061014435855260205260ff604085205416610f375761016435421015610f0e57610cca610124356101fa611677565b610cd261169a565b9160405160e0810181811067ffffffffffffffff821117610ee257604052843581526024356020820152604435604082015260643573ffffffffffffffffffffffffffffffffffffffff81168103610ede57606082015273ffffffffffffffffffffffffffffffffffffffff6084351660843503610ede57608435608082015260a43560a082015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c360112610ede57604051610d908161173b565b60c43573ffffffffffffffffffffffffffffffffffffffff81168103610ede57815273ffffffffffffffffffffffffffffffffffffffff60e4351660e43503610ede5760e43560208201526101043560408201526101243560608201526101443560808201526101643560a08201528060c083015281519160208101519160408201519173ffffffffffffffffffffffffffffffffffffffff606082015116610e5860a073ffffffffffffffffffffffffffffffffffffffff60808501511693015193611b6a565b936040519560208701977f5d21ec11e54721a256a5c5035977bd1f653eb333581872a40e2863d8d0f2bba4895260408801526060870152608086015260a085015260c084015260e083015261010090818301528152610120810181811067ffffffffffffffff8211176103ba576040525190206103899392916103839161037b90611c12565b5f80fd5b6041867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b826040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b826040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b826040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b826040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b826040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b826040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b82346110755760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126110755760ff604060209273ffffffffffffffffffffffffffffffffffffffff6110586114fe565b168152808452818120602435825284522054166040519015158152f35b80fd5b5034610ede5761108736611570565b92919091303b15610ede576110df5f936110ce9560405196879586957f0dd6ae6d0000000000000000000000000000000000000000000000000000000087528601906118fc565b60e060c485015260e4840191611962565b038183305af180156110ff576110f3575080f35b6110fd91506116de565b005b6040513d5f823e3d90fd5b5034610ede57611119366115c9565b604083019291611128846116bd565b9061113a6060850192610144846116bd565b15610b685761114b608085016116bd565b9173ffffffffffffffffffffffffffffffffffffffff928333911603610b3f5760418403610b16578261117d876116bd565b165f5260205f815260405f209360a087013594855f52825260ff60405f2054166108e8576111aa886116bd565b165f526001815260405f2060c08701355f52815260ff60405f2054166108bf5760e0860135421015610896576111f3610ab661037b936101ff610383976101fa6112439c6116bd565b9061120281610acd8451612085565b604051918201927f3cfd5b001295d3d66254ffbbc1174a8cff37cba4833b04b5ae988ce63a03e2a58452604083015260608201526060815261088a81611757565b1561039257005b5034610ede5761125936611570565b6112648392936116bd565b926112766020840194610144866116bd565b1561141357611287604084016116bd565b9073ffffffffffffffffffffffffffffffffffffffff9182339116036113ea57604183036113c157816112b9856116bd565b165f525f60205260405f2091606085013592835f5260205260ff60405f205416611398576112e6856116bd565b165f52600160205260405f2060808501355f5260205260ff60405f20541661136f5760a08401354210156113465761037b61134161133c611334611243986101ff610383976101fa8b6116bd565b9636906117b4565b611b6a565b611c12565b856040517f27661908000000000000000000000000000000000000000000000000000000008152fd5b856040517f79998279000000000000000000000000000000000000000000000000000000008152fd5b866040517fe6784f14000000000000000000000000000000000000000000000000000000008152fd5b856040517fb09262f6000000000000000000000000000000000000000000000000000000008152fd5b856040517fa568ee00000000000000000000000000000000000000000000000000000000008152fd5b846040517ffec563a0000000000000000000000000000000000000000000000000000000008152fd5b34610ede5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610ede5773ffffffffffffffffffffffffffffffffffffffff6114886114fe565b165f52600160205260405f206024355f52602052602060ff60405f2054166040519015158152f35b34610ede575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610ede5760209073ffffffffffffffffffffffffffffffffffffffff600254168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610ede57565b359073ffffffffffffffffffffffffffffffffffffffff82168203610ede57565b9181601f84011215610ede5782359167ffffffffffffffff8311610ede5760208381860195010111610ede57565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e08112610ede5760c013610ede5760049160c4359067ffffffffffffffff8211610ede576115c591600401611542565b9091565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82016101208112610ede5761010013610ede57600491610104359067ffffffffffffffff8211610ede576115c591600401611542565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82016101008112610ede5760e013610ede5760049160e4359067ffffffffffffffff8211610ede576115c591600401611542565b60c43573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b60e43573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b3573ffffffffffffffffffffffffffffffffffffffff81168103610ede5790565b67ffffffffffffffff81116116f257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176116f257604052565b60c0810190811067ffffffffffffffff8211176116f257604052565b6080810190811067ffffffffffffffff8211176116f257604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116f257604052565b91908260c0910312610ede576040516117cc8161173b565b60a08082946117da81611521565b84526117e860208201611521565b60208501526117f960408201611521565b604085015260608101356060850152608081013560808501520135910152565b67ffffffffffffffff81116116f257601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261185f82611819565b9161186d6040519384611773565b829481845281830111610ede578281602093845f960137010152565b9190826040910312610ede576040516118a18161171f565b602081936118ae81611521565b83520135908115158203610ede5760200152565b919061010083820312610ede5760206118f7604051926118e18461171f565b604084966118ef8382611889565b8652016117b4565b910152565b60a0809173ffffffffffffffffffffffffffffffffffffffff8061191f83611521565b1685528061192f60208401611521565b16602086015261194160408301611521565b16604085015260608101356060850152608081013560808501520135910152565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b67ffffffffffffffff81116116f25760051b60200190565b9080601f83011215610ede5781359160206119d2846119a0565b936040936119e36040519687611773565b81865260208087019260061b85010193818511610ede57602001915b848310611a0f5750505050505090565b838691611a1c8486611889565b8152019201916119ff565b73ffffffffffffffffffffffffffffffffffffffff80809316911690808214928315611a54575b50505090565b6020929350604490600254169360405194859384927fbd9ee66b000000000000000000000000000000000000000000000000000000008452600484015260248301525afa9081156110ff575f91611aaf575b505f8080611a4e565b90506020813d602011611ae2575b81611aca60209383611773565b81010312610ede57518015158103610ede575f611aa6565b3d9150611abd565b602073ffffffffffffffffffffffffffffffffffffffff7f26ccf9904b9b2fb069d347553978928fd2fc65efb2638dcbeb8d142e974479f0921692835f525f825260405f20815f52825260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055604051908152a2565b73ffffffffffffffffffffffffffffffffffffffff8082511691816020820151169160408201511690606081015160a06080830151920151926040519460208601967fb4055fcf718c8a3df3ed57fdd24994f9e7fd59b92cb4de2ace2999762b0865b0885260408701526060860152608085015260a084015260c083015260e082015260e08152610100810181811067ffffffffffffffff8211176116f25760405251902090565b611c1a611f33565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611c5e81611757565b51902090565b611c6e8383612054565b6005811015611dc957159081611da6575b50611d9e5760405192602093848101917f1626ba7e0000000000000000000000000000000000000000000000000000000094858452602483015260406044830152805190816064840152865f5b838110611d89575050509181611d1f6084827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f885f85819c9a9b829c01015201168101036064810184520182611773565b51915afa913d15611d82573d611d3481611819565b90611d426040519283611773565b81523d5f8383013e5b83611d77575b83611d5c5750505090565b908092935081805181010312610ede570151145f8080611a4e565b805182149350611d51565b6060611d4b565b81818401015160848287010152018790611ccc565b505050600190565b905073ffffffffffffffffffffffffffffffffffffffff8083169116145f611c7f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b602073ffffffffffffffffffffffffffffffffffffffff7feff4aa307383ba25c9ed91f870e99276c37c0de7d8d2099bf7f06848ad69811a921692835f526001825260405f20815f52825260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055604051908152a2565b90611e81826119a0565b611e8e6040519182611773565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611ebc82946119a0565b0190602036910137565b8051821015611eda5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80516020809201915f5b828110611f1f575050505090565b835185529381019392810192600101611f11565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630148061202b575b15611f9b577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611c5e8161173b565b507f00000000000000000000000000000000000000000000000000000000000000004614611f72565b9060418151145f1461207c576115c591602082015190606060408401519301515f1a906120e7565b50505f90600290565b602073ffffffffffffffffffffffffffffffffffffffff82511691015115156040519060208201927f4d29c908d0cf5cfdae041152d8523682cf4817fb676d058c311f235625e50f1984526040830152606082015260608152611c5e81611757565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411612164576020935f9360ff60809460405194855216868401526040830152606082015282805260015afa156110ff575f5173ffffffffffffffffffffffffffffffffffffffff81161561215c57905f90565b505f90600190565b505050505f9060039056fea264697066735822122054d65fb83569b099321e5265b1d193d000bd63722cf38f28a594cc819a59536a64736f6c63430008180033",
  "devdoc": {
    "details": "Handles nonce management for verified messages.       - nonce is a single use unique value per message that is invalidated after use       - group allows for an entire set of messages to be invalidated via a single cancel operation      Messages verification request must come from the domain address if it is set.       - In the case of intent / fills, this means that the market should be set as the domain.",
    "errors": {
      "VerifierInvalidDomainError()": [
        {
          "custom:error": "Message was meant for another protocol, version, or chain"
        }
      ],
      "VerifierInvalidExpiryError()": [
        {
          "custom:error": "Block timestamp has exceeded user-assigned expiration"
        }
      ],
      "VerifierInvalidGroupError()": [
        {
          "custom:error": "Group nonce has already been used"
        }
      ],
      "VerifierInvalidNonceError()": [
        {
          "custom:error": "Nonce has already been used"
        }
      ],
      "VerifierInvalidSignatureError()": [
        {
          "custom:error": "Signature length was unexpected"
        }
      ],
      "VerifierInvalidSignerError()": [
        {
          "custom:error": "Signer is trying to cancel a nonce for another user"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelGroup(uint256)": {
        "params": {
          "group": "The group nonce to cancel"
        }
      },
      "cancelGroupWithSignature((uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "params": {
          "groupCancellation": "The group cancellation message",
          "signature": "The signature of the account for the group cancellation"
        }
      },
      "cancelNonce(uint256)": {
        "params": {
          "nonce": "The nonce to cancel"
        }
      },
      "cancelNonceWithSignature((address,address,address,uint256,uint256,uint256),bytes)": {
        "details": "Process a no-op message that will invalidate the specified nonce",
        "params": {
          "common": "The common data of the message",
          "signature": "The signature of the account for the message"
        }
      },
      "constructor": {
        "details": "Initializes the domain separator and parameter caches"
      },
      "initialize(address)": {
        "params": {
          "marketFactory_": "The market factory"
        }
      },
      "verifyAccessUpdateBatch(((address,bool)[],(address,bool)[],(address,address,address,uint256,uint256,uint256)),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "accessUpdateBatch": "The batch access update (operator and signer) message to verify",
          "signature": "The signature of the account for the batch access update"
        }
      },
      "verifyCommon((address,address,address,uint256,uint256,uint256),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "common": "The common data of the message",
          "signature": "The signature of the account for the message"
        }
      },
      "verifyGroupCancellation((uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "groupCancellation": "The group cancellation to verify",
          "signature": "The signature of the account for the group cancellation"
        }
      },
      "verifyIntent((int256,int256,uint256,address,address,uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "intent": "The intent order to verify",
          "signature": "The signature of the taker for the intent order"
        }
      },
      "verifyOperatorUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "operatorUpdate": "The operator update message to verify",
          "signature": "The signature of the account for the operator update"
        }
      },
      "verifySignerUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)": {
        "details": "Cancels the nonce after verifying the signature      Reverts if the signature does not match the signer",
        "params": {
          "signature": "The signature of the account for the signer update",
          "signerUpdate": "The signer update message to verify"
        }
      }
    },
    "stateVariables": {
      "marketFactory": {
        "details": "market factory to check authorization"
      }
    },
    "title": "Verifier",
    "version": 1
  },
  "userdoc": {
    "events": {
      "GroupCancelled(address,uint256)": {
        "notice": "Emitted when a group nonce is cancelled"
      },
      "NonceCancelled(address,uint256)": {
        "notice": "Emitted when a nonce is cancelled"
      }
    },
    "kind": "user",
    "methods": {
      "cancelGroup(uint256)": {
        "notice": "Cancels a group nonce"
      },
      "cancelGroupWithSignature((uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Cancels a group for an account via a signed message"
      },
      "cancelNonce(uint256)": {
        "notice": "Cancels a nonce"
      },
      "cancelNonceWithSignature((address,address,address,uint256,uint256,uint256),bytes)": {
        "notice": "Cancels a nonce for an account via a signed message"
      },
      "groups(address,uint256)": {
        "notice": "Returns whether the group nonce has been cancelled"
      },
      "initialize(address)": {
        "notice": "Initializes the contract state"
      },
      "nonces(address,uint256)": {
        "notice": "Returns whether the nonce has been cancelled"
      },
      "verifyAccessUpdateBatch(((address,bool)[],(address,bool)[],(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Verifies the signature of an access update batch type"
      },
      "verifyCommon((address,address,address,uint256,uint256,uint256),bytes)": {
        "notice": "Verifies the signature of no-op common message"
      },
      "verifyGroupCancellation((uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Verifies the signature of a group cancellation type"
      },
      "verifyIntent((int256,int256,uint256,address,address,uint256,(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Verifies the signature of an intent order type"
      },
      "verifyOperatorUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Verifies the signature of a operator update type"
      },
      "verifySignerUpdate(((address,bool),(address,address,address,uint256,uint256,uint256)),bytes)": {
        "notice": "Verifies the signature of a signer update type"
      }
    },
    "notice": "Singleton ERC712 signed message verifier for the Perennial protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7842,
        "contract": "@perennial/verifier/contracts/Verifier.sol:Verifier",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 7849,
        "contract": "@perennial/verifier/contracts/Verifier.sol:Verifier",
        "label": "groups",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 51256,
        "contract": "@perennial/verifier/contracts/Verifier.sol:Verifier",
        "label": "marketFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMarketFactorySigners)51450"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMarketFactorySigners)51450": {
        "encoding": "inplace",
        "label": "contract IMarketFactorySigners",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
